filter {
  if [icinga][facility] == "ApiListener" {
    if [message] =~ /^New client connection/ {
      grok {
        match => ["message","New client connection( for identity '%{HOSTNAME:[icinga][clientendpoint]}')? %{WORD:[icinga][direction]} \[%{IPORHOST:[icinga][clienthost]}\]:%{NUMBER:[icinga][clientport]}( \(%{GREEDYDATA:[icinga][detail]}\))?"]
        id => "icinga_newclientconnection"
        add_tag => "icinga_newclientconnection"
        tag_on_failure => ["_grokparsefailure","icinga_newclientconnection_failed"]
        add_field => {
          "[icinga][eventtype]" => "newclientconnection"
        }
      }
    } else if [message] =~ /^Finished reconnecting/ {
      grok {
        match => ["message","Finished reconnecting to endpoint '%{HOSTNAME:[icinga][clientendpoint]}' via host '%{IPORHOST:[icinga][clienthost]}' and port '%{NUMBER:[icinga][clientport]}'"]
        id => "icinga_finishedreconnecting"
        add_tag => "icinga_finishedreconnecting"
        tag_on_failure => ["_grokparsefailure","icinga_finishedreconnecting_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedreconnecting"
        }
      }
    } else if [message] =~ /^Finished sending runtime config/ {
      grok {
        match => ["message","Finished sending runtime config updates for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'"]
        id => "icinga_finishedsendingconfig"
        add_tag => "icinga_finishedsendingconfig"
        tag_on_failure => ["_grokparsefailure","icinga_finishedsendingconfig_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedsendingconfig"
        }
      }
    } else if [message] =~ /^Reconnecting to/ {
      grok {
        match => ["message","Reconnecting to endpoint '%{HOSTNAME:[icinga][clientendpoint]}' via host '%{IPORHOST:[icinga][clienthost]}' and port '%{NUMBER:[icinga][clientport]}'"]
        id => "icinga_reconnectingto"
        add_tag => "icinga_reconnectingto"
        tag_on_failure => ["_grokparsefailure","icinga_reconnectingto_failed"]
        add_field => {
          "[icinga][eventtype]" => "reconnectingto"
        }
      }
    } else if [message] =~ /^Client TLS handshake failed/ {
      grok {
        match => ["message","Client TLS handshake failed \(%{WORD:[icinga][direction]} \[%{IPORHOST:[icinga][clienthost]}\]:%{NUMBER:[icinga][clientport]}\): Error: %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_tlshandshakefailed"
        add_tag => "icinga_tlshandshakefailed"
        tag_on_failure => ["_grokparsefailure","icinga_tlshandshakefailed_failed"]
        add_field => {
          "[icinga][eventtype]" => "tlshandshakefailed"
        }
      }
    } else if [message] =~ /^Certificate validation failed/ {
      grok {
        match => ["message","Certificate validation failed for endpoint '%{HOSTNAME:[icinga][clientendpoint]}': code %{NUMBER:[icinga][errorcode]}: %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_certificateinvalid"
        add_tag => "icinga_certificateinvalid"
        tag_on_failure => ["_grokparsefailure","icinga_certificateinvalid_failed"]
        add_field => {
          "[icinga][eventtype]" => "certificateinvalid"
        }
      }
    } else if [message] =~ /^Removing API client for endpoint/ {
      grok {
        match => ["message","Removing API client for endpoint '%{HOSTNAME:[icinga][clientendpoint]}'. %{NUMBER:[icinga][remainingclients]} API clients left."]
        id => "icinga_removingapiclient"
        add_tag => "icinga_removingapiclient"
        tag_on_failure => ["_grokparsefailure","icinga_removingapiclient_failed"]
        add_field => {
          "[icinga][eventtype]" => "removingapiclient"
        }
      }
    } else if [message] =~ /^Sending replay log/ {
      grok {
        match => ["message","Sending replay log for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_sendingreplaylog"
        add_tag => "icinga_sendingreplaylog"
        tag_on_failure => ["_grokparsefailure","icinga_sendingreplaylog_failed"]
        add_field => {
          "[icinga][eventtype]" => "sendingreplaylog"
        }
      }
    } else if [message] =~ /^Finished sending replay/ {
      grok {
        match => ["message","Finished sending replay log for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_finishedreplaylog"
        add_tag => "icinga_finishedreplaylog"
        tag_on_failure => ["_grokparsefailure","icinga_finishedreplaylog_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedreplaylog"
        }
      }
    } else if [message] =~ /^Finished syncing endpoint/ {
      grok {
        match => ["message","Finished syncing endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_finishedsyncingendpoint"
        add_tag => "icinga_finishedsyncingendpoint"
        tag_on_failure => ["_grokparsefailure","icinga_finishedsyncingendpoint_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedsyncingendpoint"
        }
      }
    } else if [message] =~ /^Requesting new certificate/ {
      grok {
        match => ["message","Requesting new certificate for this Icinga instance from endpoint '%{HOSTNAME:[icinga][clientendpoint]}'."]
        id => "icinga_requestingcertificate"
        add_tag => "icinga_requestingcertificate"
        tag_on_failure => ["_grokparsefailure","icinga_requestingcertificate_failed"]
        add_field => {
          "[icinga][eventtype]" => "requestingcertificate"
        }
      }
    } else if [message] =~ /^Finished syncing runtime objects/ {
      grok {
        match => ["message","Finished syncing runtime objects to endpoint '%{HOSTNAME:[icinga][clientendpoint]}'."]
        id => "icinga_finishedsyncingruntimeobjects"
        add_tag => "icinga_finishedsyncingruntimeobjects"
        tag_on_failure => ["_grokparsefailure","icinga_finishedsyncingruntimeobjects_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedsyncingruntimeobjects"
        }
      }
    } else if [message] =~ /^Sending config updates/ {
      grok {
        match => ["message","Sending config updates for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_sendingconfigupdates"
        add_tag => "icinga_sendingconfigupdates"
        tag_on_failure => ["_grokparsefailure","icinga_sendingconfigupdates_failed"]
        add_field => {
          "[icinga][eventtype]" => "sendingconfigupdates"
        }
      }
    } else if [message] =~ /^Finished sending config file/ {
      grok {
        match => ["message","Finished sending config file updates for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_finishedconfigfiles"
        add_tag => "icinga_finishedconfigfiles"
        tag_on_failure => ["_grokparsefailure","icinga_finishedconfigfiles_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedconfigfiles"
        }
      }
    } else if [message] =~ /^Relaying/ {
      grok {
        match => ["message","Relaying '%{DATA:[icinga][message]}' message"]
        id => "icinga_relayingmessage"
        add_tag => "icinga_relayingmessage"
        tag_on_failure => ["_grokparsefailure","icinga_relayingmessage_failed"]
        add_field => {
          "[icinga][eventtype]" => "relayingmessage"
        }
      }
    } else if [message] =~ /^Sending message/ {
      grok {
        match => ["message","Sending message '%{DATA:[icinga][message]}' to '%{HOSTNAME:[icinga][clientendpoint]}'"]
        id => "icinga_sendingmessage"
        add_tag => "icinga_sendingmessage"
        tag_on_failure => ["_grokparsefailure","icinga_sendingmessage_failed"]
        add_field => {
          "[icinga][eventtype]" => "sendingmessage"
        }
      }
    } else if [message] =~ /^Not connecting to Endpoint/ {
      grok {
        match => ["message","Not connecting to Endpoint '%{HOSTNAME:[icinga][clientendpoint]}' because %{GREEDYDATA:[icinga][detail]}."]
        id => "icinga_notconnecting"
        add_tag => "icinga_notconnecting"
        tag_on_failure => ["_grokparsefailure","icinga_notconnecting_failed"]
        add_field => {
          "[icinga][eventtype]" => "notconnecting"
        }
      }
    } else if [message] =~ /^Discarding/ {
      grok {
        match => ["message","Discarding '%{GREEDYDATA:[icinga][detail]}' message from '%{HOSTNAME:[icinga][clientendpoint]}'( for object '%{DATA:[icinga][object]}' of type '%{WORD:[icinga][objecttype]'. Sender is in a child zone)?."]
        id => "icinga_discardingmessage"
        add_tag => "icinga_discardingmessage"
        tag_on_failure => ["_grokparsefailure","icinga_discardingmessage_failed"]
        add_field => {
          "[icinga][eventtype]" => "discardingmessage"
        }
      }
    } else if [message] =~ /^Not checking connection/ {
      grok {
        match => ["message","Not checking connection to Zone '%{DATA:[icinga][zone]}' because %{GREEDYDATA:[icinga][detail]}."]
        id => "icinga_notcheckingconnection"
        add_tag => "icinga_notcheckingconnection"
        tag_on_failure => ["_grokparsefailure","icinga_notcheckingconnection_failed"]
        add_field => {
          "[icinga][eventtype]" => "notcheckingconnection"
        }
      }
    } else if [message] =~ /^Setting log position/ {
      grok {
        match => ["message","Setting log position for identity '%{HOSTNAME:[icinga][clientendpoint]}': %{GREEDYDATA:logposition}"]
        id => "icinga_settinglogposition"
        add_tag => "icinga_settinglogposition"
        tag_on_failure => ["_grokparsefailure","icinga_settinglogposition_failed"]
        add_field => {
          "[icinga][eventtype]" => "settinglogposition"
        }
      }
      date {
        match => ["logposition","yyyy/MM/dd HH:mm:ss"]
        target => "[icinga][logposition]"
      }
      mutate {
        remove_field => "logpositon"
      }
    } else if [message] == "New HTTP client" {
      mutate {
        id => "icinga_newhttpclient"
        add_tag => "icinga_newhttpclient"
        add_field => {
          "[icinga][eventtype]" => "newhttpclient"
        }
      }
    } else if [message] == "Restarting after configuration change." {
      mutate {
        id => "icinga_restartingafterconfigchange"
        add_tag => "icinga_restartingafterconfigchange"
        add_field => {
          "[icinga][eventtype]" => "restartingafterconfigchange"
        }
      }
    } else if [message] == "'api' stopped." {
      mutate {
        id => "icinga_apistopped"
        add_tag => "icinga_apistopped"
        add_field => {
          "[icinga][eventtype]" => "apistopped"
        }
      }
    } else if [message] == "'api' started." {
      mutate {
        id => "icinga_apistarted"
        add_tag => "icinga_apistarted"
        add_field => {
          "[icinga][eventtype]" => "apistarted"
        }
      }
    } else if [message] == "New JSON-RPC client" {
      mutate {
        id => "icinga_newjsonrpcclient"
        add_tag => "icinga_newjsonrpcclient"
        add_field => {
          "[icinga][eventtype]" => "newjsonrpcclient"
        }
      }
    } else if [message] =~ /^Cannot connect to host/ {
      grok {
        match => ["message","Cannot connect to host '%{IPORHOST:[icinga][clienthost]}' on port '%{NUMBER:[icinga][clientport]}'"]
        id => "icinga_cannotconnectohost"
        add_tag => "icinga_cannotconnectohost"
        tag_on_failure => ["_grokparsefailure","icinga_cannotconnectohost_failed"]
        add_field => {
          "[icinga][eventtype]" => "cannotconnectohost"
        }
      }
    } else if [message] =~ /^Current zone master/ {
      grok {
        match => ["message","Current zone master: %{HOSTNAME:[icinga][currentmaster]}"]
        id => "icinga_currentzonemaster"
        add_tag => "icinga_currentzonemaster"
        tag_on_failure => ["_grokparsefailure","icinga_currentzonemaster_failed"]
        add_field => {
          "[icinga][eventtype]" => "currentzonemaster"
        }
      }
    } else if [message] =~ /^Connected endpoints/ {
      grok {
        match => ["message","Connected endpoints: %{GREEDYDATA:[icinga][connectedendpoints]}"]
        id => "icinga_connectedendpoints"
        add_tag => "icinga_connectedendpoints"
        tag_on_failure => ["_grokparsefailure","icinga_connectedendpoints_failed"]
        add_field => {
          "[icinga][eventtype]" => "connectedendpoints"
        }
      }
    } else if [message] =~ /^Creating config update/ {
      grok {
        match => ["message","Creating config update for file '%{DATA:[icinga][path]}'."]
        id => "icinga_creatingconfigupdate"
        add_tag => "icinga_creatingconfigupdate"
        tag_on_failure => ["_grokparsefailure","icinga_creatingconfigupdate_false"]
        add_field => {
          "[icinga][eventtype]" => "creatingconfigupdate"
        }
      }
    } else if [message] =~ /^Syncing runtime objects/ {
      grok {
        match => ["message","Syncing runtime objects to endpoint '%{HOSTNAME:[icinga][clientendpoint]}'."]
        id => "icinga_syncingruntimeobjects"
        add_tag => "icinga_syncingruntimeobjects"
        tag_on_failure => ["_grokparsefailure","icinga_syncingruntimeobjects"]
        add_field => {
          "[icinga][eventtype]" => "syncingruntimeobjects"
        }
      }
    } else if [message] =~ /^Syncing configuration files/ {
      grok {
        match => ["message","Syncing configuration files for( global)? zone '%{DATA:[icinga][zone]}' to endpoint '%{HOSTNAME:[icinga][clientendpoint]}'."]
        id => "icinga_syncingconfigurationfiles"
        add_tag => "icinga_syncingconfigurationfiles"
        tag_on_failure => ["_grokparsefailure","icinga_syncingconfigurationfiles_failed"]
        add_field => {
          "[icinga][eventtype]" => "syncingconfigurationfiles"
        }
      }
    } else if [message] =~ /^Copying configuration files/ {
      grok {
        match => ["message","Copying %{NUMBER:[icinga][configfilecount]} zone configuration files for zone '%{DATA:[icinga][zone]}' to '%{DATA:[icinga][path]}'."]
        id => "icinga_copyingconfigurationfiles"
        add_tag => "icinga_copyingconfigurationfiles"
        tag_on_failure => ["_grokparsefailure","icinga_copyingconfigurationfiles_failed"]
        add_field => {
          "[icinga][eventtype]" => "copyingconfigurationfiles"
        }
      }
    } else if [message] =~ /^Updating configuration file/ {
      grok {
        match => ["message","Updating configuration file: %{DATA:[icinga][path]}"]
        id => "icinga_updateingconfigurationfile"
        add_tag => "icinga_updateingconfigurationfile"
        tag_on_failure => ["_grokparsefailure","icinga_updateingconfigurationfile_failed"]
        add_field => {
          "[icinga][eventtype]" => "updateingconfigurationfile"
        }
      }
    } else if [message] =~ /^Removing old log file/ {
      grok {
        match => ["message","Removing old log file: %{DATA:[icinga][path]}"]
        id => "icinga_removingoldlogfile"
        add_tag => "icinga_removingoldlogfile"
        tag_on_failure => ["_grokparsefailure","icinga_removingoldlogfile_failed"]
        add_field => {
          "[icinga][eventtype]" => "removingoldlogfile"
        }
      }
    } else if [message] =~ /^Started new listener/ {
      grok {
        match => ["message","Started new listener on '\[%{IPORHOST:[icinga][listenerhost]}\]:%{NUMBER:[icinga][port]}'"]
        id => "icinga_startednewlistener"
        add_tag => "icinga_startednewlistener"
        tag_on_failure => ["_grokparsefailure","icinga_startednewlistener_failed"]
        add_field => {
          "[icinga][eventtype]" => "startednewlistener"
        }
      }
    } else if [message] =~ /^Adding new listener/ {
      grok {
        match => ["message","Adding new listener on port '%{NUMBER:[icinga][port]}'"]
        id => "icinga_addingnewlistener"
        add_tag => "icinga_addingnewlistener"
        tag_on_failure => ["_grokparsefailure","icinga_addednewlistener_failed"]
        add_field => {
          "[icinga][eventtype]" => "addingnewlistener"
        }
      }
    } else if [message] =~ /^Applying configuration file update/ {
      grok {
        match => ["message","Applying configuration file update for path '%{DATA:[icinga][path]}' \(%{NUMBER:[icinga][bytes]} Bytes\). Received timestamp '%{DATA:receivedtimestamp}' \(%{NUMBER:[icinga][receivedepoch]}\), Current timestamp '%{DATA:currenttimestamp}' \(%{NUMBER:[icinga][currentepoch]}\)."]
        id => "icinga_applyingconfigfileupdate"
        add_tag => "icinga_applyingconfigfileupdate"
        tag_on_failure => ["_grokparsefailure","icinga_applyingconfigfileupdate_failed"]
        add_field => {
          "[icinga][eventtype]" => "applyingconfigfileupdate"
        }
      }
    } else if [message] =~ /^Received update for object/ {
      grok {
        match => ["message","Received update for object: %{GREEDYDATA:object}"]
        id => "icinga_receivedupdate"
        add_tag => "icinga_receivedupdate"
        tag_on_failure => ["_grokparsefailure","icinga_receivedupdate_failed"]
        add_field => {
          "[icinga][eventtype]" => "receivedupdate"
        }
      }
      json {
        source => "object"
        target => "[icinga][objectdetails]"
      }
      mutate {
        remove_field => "object"
      }
    } else if [message] =~ /^Replaying log/ {
      grok {
        match => ["message","Replaying log: %{GREEDYDATA:[icinga][path]}"]
        id => "icinga_replayinglog"
        add_tag => "icinga_replayinglog"
        tag_on_failure => ["_grokparsefailure","icinga_replayinglog_failed"]
        add_field => {
          "[icinga][eventtype]" => "replayinglog"
        }
      }
    } else if [message] =~ /^Replayed/ {
      grok {
        match => ["message","Replayed %{NUMBER:[icinga][messagecount]} messages."]
        id => "icinga_replayedmessages"
        add_tag => "icinga_replayedmessages"
        tag_on_failure => ["_grokparsefailure","icinga_replayedmessages_failed"]
        add_field => {
          "[icinga][eventtype]" => "replayedmessages"
        }
      }
    } else if [message] =~ /^Discarding config update for object/ {
      grok {
        match => ["message","Discarding config update for object '%{DATA:[icinga][objectname]}': %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_discardingconfigupdate"
        add_tag => "icinga_discardingconfigupdate"
        tag_on_failure => ["_grokparsefailure","icinga_discardingconfigupdate_failed"]
        add_field => {
          "[icinga][eventtype]" => "discardingconfigupdate"
        }
      }
    } else if [message] =~ /^Syncing configuration files for zone/ {
      grok {
        match => ["message","Syncing configuration files for zone '%{DATA:[icinga][zone]}' to endpoint '%{HOSTNAME:[icinga][clientendpoint]}'."]
        id => "icinga_syncingconfigfiles"
        add_tag => "icinga_syncingconfigfiles"
        tag_on_failure => ["_grokparsefailure","icinga_syncingconfigfiles_failed"]
        add_field => {
          "[icinga][eventtype]" => "syncingconfigfiles"
        }
      }
    } else if [message] =~ /^Ignoring config update for zone/ {
      grok {
        match => ["message","Ignoring config update for zone '%{DATA:[icinga][zone]}' because %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_ignoringconfigupdateforzone"
        add_tag => "icinga_ignoringconfigupdateforzone"
        tag_on_failure => ["_grokparsefailure","icinga_ignoringconfigupdateforzone_failed"]
        add_field => {
          "[icinga][eventtype]" => "ignoringconfigupdateforzone"
        }
      }
    } else if [message] =~ /^Ignoring config update./ {
      grok {
        match => ["message","Ignoring config update. %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_ignoringconfigupdate"
        add_tag => "icinga_ignoringconfigupdate"
        tag_on_failure => ["_grokparsefailure","icinga_ignoringconfigupdate_failed"]
        add_field => {
          "[icinga][eventtype]" => "ignoringconfigupdate"
        }
      }
    } else if [message] =~ /^Could not delete non-existent object/ {
      grok {
        match => ["message","Could not delete non-existent object '%{DATA:[icinga][object]}' with type '%{WORD:[icinga][objecttype]}'."]
        id => "icinga_couldnotdeletenonexistentobject"
        add_tag => "icinga_couldnotdeletenonexistentobject"
        tag_on_failure => ["_grokparsefailure","icinga_couldnotdeletenonexistentobject_failed"]
        add_field => {
          "[icinga][eventtype]" => "couldnotdeletenonexistentobject"
        }
      }
    } else if [message] =~ /^Copying \d/ {
      grok {
        match => ["message","Copying %{NUMBER:[icinga][filecount]} zone configuration files for zone '%{DATA:[icinga][zone]}' to '%{DATA:[icinga][path]}'."]
        id => "icinga_copyingconfigfiles"
        add_tag => "icinga_copyingconfigfiles"
        tag_on_failure => ["_grokparsefailure","icinga_copyingconfigfiles_failed"]
        add_field => {
          "[icinga][eventtype]" => "copyingconfigfiles"
        }
      }
    } else if [message] =~ /^Not connecting to Zone/ {
      grok {
        match => ["message","Not connecting to Zone '%{DATA:[icinga][zone]}' because %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_notconnectingtozone"
        add_tag => "icinga_notconnectingtozone"
        tag_on_failure => ["_grokparsefailure","icinga_notconnectingtozone_failed"]
        add_field => {
          "[icinga][eventtype]" => "notconnectingtozone"
        }
      }
    } else if [message] =~ /^Our configuration is more recent/ {
      grok {
        match => ["message","Our configuration is more recent than the received configuration update. Ignoring configuration file update for path '%{DATA:[icinga][path]}'. Current timestamp '%{DATA:currenttimestamp}' \(%{NUMBER:[icinga][epochcurrent]}\) >= received timestamp '%{DATA:receivedtimestamp}' \(%{NUMBER:[icinga][epochreceived]}\)."]
        id => "icinga_ourconfigismorerecent"
        add_tag => "icinga_ourconfigismorerecent"
        tag_on_failure => ["_grokparsefailure","icinga_ourconfigismorerecent_failed"]
        add_field => {
          "[icinga][eventtype]" => "ourconfigismorerecent"
        }
      }
    } else if [message] =~ /^Ignoring config update from/ {
      grok {
        match => ["message","Ignoring config update from '%{HOSTNAME:[icinga][clientendpoint]}' for object '%{DATA:[icinga][object]}' of type '%{WORD:[icinga][objecttype]}'. %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_ignoringconfigupdatefrom"
        add_tag => "icinga_ignoringconfigupdatefrom"
        tag_on_failure => ["_grokparsefailure","icinga_ignoringconfigupdatefrom_failed"]
        add_field => {
          "[icinga][eventtype]" => "ignoringconfigupdatefrom"
        }
      }
    } else if [message] =~ /^Applying config update from endpoint/ {
      grok {
        match => ["message","Applying config update from endpoint '%{HOSTNAME:[icinga][clientendpoint]}' of zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_applyingconfigupdatefromendpoint"
        add_tag => "icinga_applyingconfigupdatefromendpoint"
        tag_on_failure => ["_grokparsefailure","icinga_applyingconfigupdatefromendpoint_failed"]
        add_field => {
          "[icinga][eventtype]" => "applyingconfigupdatefromendpoint"
        }
      }
    }
  }
}
