filter {
  if [icinga][facility] == "ApiListener" {
    if [message] =~ /^New client connection/ {
      grok {
        match => ["message","New client connection for identity '%{HOSTNAME:[icinga][clientendpoint]}' %{WORD:[icinga][direction]} \[%{IPORHOST:[icinga][clienthost]}\]:%{NUMBER:[icinga][clientport]}( \(%{GREEDYDATA:[icinga][detail]}\))?"]
        id => "icinga_newclientconnection"
        add_tag => "icinga_newclientconnection"
        tag_on_failure => ["_grokparsefailure","icinga_newclientconnection_failed"]
        add_field => {
          "[icinga][eventtype]" => "newclientconnection"
        }
      }
    } else if [message] =~ /^Finished reconnecting/ {
      grok {
        match => ["message","Finished reconnecting to endpoint '%{HOSTNAME:[icinga][clientendpoint]}' via host '%{IPORHOST:[icinga][clienthost]}' and port '%{NUMBER:[icinga][clientport]}'"]
        id => "icinga_finishedreconnecting"
        add_tag => "icinga_finishedreconnecting"
        tag_on_failure => ["_grokparsefailure","icinga_finishedreconnecting_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedreconnecting"
        }
      }
    } else if [message] =~ /^Finished sending runtime config/ {
      grok {
        match => ["message","Finished sending runtime config updates for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'"]
        id => "icinga_finishedsendingconfig"
        add_tag => "icinga_finishedsendingconfig"
        tag_on_failure => ["_grokparsefailure","icinga_finishedsendingconfig_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedsendingconfig"
        }
      }
    } else if [message] =~ /^Reconnecting to/ {
      grok {
        match => ["message","Reconnecting to endpoint '%{HOSTNAME:[icinga][clientendpoint]}' via host '%{IPORHOST:[icinga][clienthost]}' and port '%{NUMBER:[icinga][clientport]}'"]
        id => "icinga_reconnectingto"
        add_tag => "icinga_reconnectingto"
        tag_on_failure => ["_grokparsefailure","icinga_reconnectingto_failed"]
        add_field => {
          "[icinga][eventtype]" => "reconnectingto"
        }
      }
    } else if [message] =~ /^Client TLS handshake failed/ {
      grok {
        match => ["message","Client TLS handshake failed \(%{WORD:[icinga][direction]} \[%{IPORHOST:[icinga][clienthost]}\]:%{NUMBER:[icinga][clientport]}\): Error: %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_tlshandshakefailed"
        add_tag => "icinga_tlshandshakefailed"
        tag_on_failure => ["_grokparsefailure","icinga_tlshandshakefailed_failed"]
        add_field => {
          "[icinga][eventtype]" => "tlshandshakefailed"
        }
      }
    } else if [message] =~ /^Certificate validation failed/ {
      grok {
        match => ["message","Certificate validation failed for endpoint '%{HOSTNAME:[icinga][clientendpoint]}': code %{NUMBER:[icinga][errorcode]}: %{GREEDYDATA:[icinga][detail]}"]
        id => "icinga_certificateinvalid"
        add_tag => "icinga_certificateinvalid"
        tag_on_failure => ["_grokparsefailure","icinga_certificateinvalid_failed"]
        add_field => {
          "[icinga][eventtype]" => "certificateinvalid"
        }
      }
    } else if [message] =~ /^Removing API client for endpoint/ {
      grok {
        match => ["message","Removing API client for endpoint '%{HOSTNAME:[icinga][clientendpoint]}'. %{NUMBER:[icinga][remainingclients]} API clients left."]
        id => "icinga_removingapiclient"
        add_tag => "icinga_removingapiclient"
        tag_on_failure => ["_grokparsefailure","icinga_removingapiclient_failed"]
        add_field => {
          "[icinga][eventtype]" => "removingapiclient"
        }
      }
    } else if [message] =~ /^Sending replay log/ {
      grok {
        match => ["message","Sending replay log for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_sendingreplaylog"
        add_tag => "icinga_sendingreplaylog"
        tag_on_failure => ["_grokparsefailure","icinga_sendingreplaylog_failed"]
        add_field => {
          "[icinga][eventtype]" => "sendingreplaylog"
        }
      }
    } else if [message] =~ /^Finished sending replay/ {
      grok {
        match => ["message","Finished sending replay log for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_finishedreplaylog"
        add_tag => "icinga_finishedreplaylog"
        tag_on_failure => ["_grokparsefailure","icinga_finishedreplaylog_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedreplaylog"
        }
      }
    } else if [message] =~ /^Finished syncing endpoint/ {
      grok {
        match => ["message","Finished syncing endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_finishedsyncingendpoint"
        add_tag => "icinga_finishedsyncingendpoint"
        tag_on_failure => ["_grokparsefailure","icinga_finishedsyncingendpoint_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedsyncingendpoint"
        }
      }
    } else if [message] =~ /^Requesting new certificate/ {
      grok {
        match => ["message","Requesting new certificate for this Icinga instance from endpoint '%{HOSTNAME:[icinga][clientendpoint]}'."]
        id => "icinga_requestingcertificate"
        add_tag => "icinga_requestingcertificate"
        tag_on_failure => ["_grokparsefailure","icinga_requestingcertificate_failed"]
        add_field => {
          "[icinga][eventtype]" => "requestingcertificate"
        }
      }
    } else if [message] =~ /^Finished syncing runtime objects/ {
      grok {
        match => ["message","Finished syncing runtime objects to endpoint '%{HOSTNAME:[icinga][clientendpoint]}'."]
        id => "icinga_finishedsyncingruntimeobjects"
        add_tag => "icinga_finishedsyncingruntimeobjects"
        tag_on_failure => ["_grokparsefailure","icinga_finishedsyncingruntimeobjects_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedsyncingruntimeobjects"
        }
      }
    } else if [message] =~ /^Sending config updates/ {
      grok {
        match => ["message","Sending config updates for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_sendingconfigupdates"
        add_tag => "icinga_sendingconfigupdates"
        tag_on_failure => ["_grokparsefailure","icinga_sendingconfigupdates_failed"]
        add_field => {
          "[icinga][eventtype]" => "sendingconfigupdates"
        }
      }
    } else if [message] =~ /^Finished sending config file/ {
      grok {
        match => ["message","Finished sending config file updates for endpoint '%{HOSTNAME:[icinga][clientendpoint]}' in zone '%{DATA:[icinga][zone]}'."]
        id => "icinga_finishedconfigfiles"
        add_tag => "icinga_finishedconfigfiles"
        tag_on_failure => ["_grokparsefailure","icinga_finishedconfigfiles_failed"]
        add_field => {
          "[icinga][eventtype]" => "finishedconfigfiles"
        }
      }
    } else if [message] =~ /^Finished sending config file/ {
      grok {
        match => ["message","Syncing runtime objects to endpoint '%{HOSTNAME:[icinga][clientendpoint]}'."]
        id => "icinga_startsyncingruntimeobjects"
        add_tag => "icinga_startsyncingruntimeobjects"
        tag_on_failure => ["_grokparsefailure","icinga_startsyncingruntimeobjects_failed"]
        add_field => {
          "[icinga][eventtype]" => "startsyncingruntimeobjects"
        }
      }
    } else if [message] =~ /^Relaying/ {
      grok {
        match => ["message","Relaying '%{DATA:[icinga][message]}' message"]
        id => "icinga_relayingmessage"
        add_tag => "icinga_relayingmessage"
        tag_on_failure => ["_grokparsefailure","icinga_relayingmessage_failed"]
        add_field => {
          "[icinga][eventtype]" => "relayingmessage"
        }
      }
    } else if [message] =~ /^Sending message/ {
      grok {
        match => ["message","Sending message '%{DATA:[icinga][message]}' to '%{HOSTNAME:[icinga][clientendpoint]}'"]
        id => "icinga_sendingmessage"
        add_tag => "icinga_sendingmessage"
        tag_on_failure => ["_grokparsefailure","icinga_sendingmessage_failed"]
        add_field => {
          "[icinga][eventtype]" => "sendingmessage"
        }
      }
    } else if [message] =~ /^Not connecting to Endpoint/ {
      grok {
        match => ["message","Not connecting to Endpoint '%{HOSTNAME:[icinga][clientendpoint]}' because %{GREEDYDATA:[icinga][detail]}."]
        id => "icinga_notconnecting"
        add_tag => "icinga_notconnecting"
        tag_on_failure => ["_grokparsefailure","icinga_notconnecting_failed"]
        add_field => {
          "[icinga][eventtype]" => "notconnecting"
        }
      }
    } else if [message] =~ /^Discarding/ {
      grok {
        match => ["message","Discarding '%{GREEDYDATA:[icinga][detail]}' message from '%{HOSTNAME:[icinga][clientendpoint]}'( for object '%{NOTSPACE:[icinga][object]}' of type '%{WORD:[icinga][objecttype]'. Sender is in a child zone)?."]
        id => "icinga_discardingmessage"
        add_tag => "icinga_discardingmessage"
        tag_on_failure => ["_grokparsefailure","icinga_discardingmessage_failed"]
        add_field => {
          "[icinga][eventtype]" => "discardingmessage"
        }
      }
    } else if [message] =~ /^Not checking connection/ {
      grok {
        match => ["message","Not checking connection to Zone '%{DATA:[icinga][zone]}' because %{GREEDYDATA:[icinga][detail]}."]
        id => "icinga_notcheckingconnection"
        add_tag => "icinga_notcheckingconnection"
        tag_on_failure => ["_grokparsefailure","icinga_notcheckingconnection_failed"]
        add_field => {
          "[icinga][eventtype]" => "notcheckingconnection"
        }
      }
    } else if [message] =~ /^Setting log position/ {
      grok {
        match => ["message","Setting log position for identity '%{HOSTNAME:[icinga][clientendpoint]}': %{GREEDYDATA:logposition}"]
        id => "icinga_settinglogposition"
        add_tag => "icinga_settinglogposition"
        tag_on_failure => ["_grokparsefailure","icinga_settinglogposition_failed"]
        add_field => {
          "[icinga][eventtype]" => "settinglogposition"
        }
      }
      date {
        match => ["logposition","yyyy/MM/dd HH:mm:ss"]
        target => [icinga][logposition]
      }
      mutate {
        remove_field => "logpositon"
      }
    }
  }
}
